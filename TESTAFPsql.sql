USE MASTER
GO
CREATE DATABASE TESTAFP
GO
USE TESTAFP
GO

CREATE TABLE PACIENTE
(
	ID INT PRIMARY KEY IDENTITY(1,1),
	NOMBRE VARCHAR(50) NOT NULL,
	APELLIDO VARCHAR(50) NOT NULL,
	FECHA_NACIMIENTO DATE NOT NULL,
	ESTADO BIT NOT NULL,
	FECHA_REGISTRO DATETIME NOT NULL
);
GO

CREATE TABLE VOCACION
(
	ID INT PRIMARY KEY IDENTITY(1,1),
	DESCRIPCION VARCHAR(30) NOT NULL, -- UNIQUE
	FECHA_REGISTRO DATETIME NOT NULL
);

CREATE TABLE MEDICO
(
	ID INT PRIMARY KEY IDENTITY(1,1),
	NOMBRE VARCHAR(50) NOT NULL,
	APELLIDO VARCHAR(50) NOT NULL,
	FECHA_NACIMIENTO DATE NOT NULL,
	VOCACION INT NOT NULL,
	ESTADO BIT NOT NULL,
	FECHA_REGISTRO DATETIME NOT NULL
);
GO

CREATE TABLE CAUSACITA
(
	ID INT PRIMARY KEY IDENTITY(1,1),
	DESCRIPCION VARCHAR(30) NOT NULL, --UNIQUE
	FECHA_REGISTRO DATETIME NOT NULL
);
GO

CREATE TABLE CITA
(
	ID INT PRIMARY KEY IDENTITY(1,1),
	PACIENTE INT NOT NULL,
	MEDICO INT NOT NULL,
	HORARIO DATETIME NOT NULL,
	CAUSACITA INT NOT NULL,
	FECHA_REGISTRO DATETIME NOT NULL
);
GO

CREATE TABLE DIAGNOSTICO
(
	ID INT PRIMARY KEY IDENTITY(1,1),
	CITA INT NOT NULL,
	DESCRIPCION TEXT,
	FECHA_REGISTRO DATETIME NOT NULL
);
GO

USE TESTAFP
GO
ALTER TABLE VOCACION 
ADD CONSTRAINT UQ_DESCRIPCION
UNIQUE (DESCRIPCION)

GO
ALTER TABLE MEDICO
ADD CONSTRAINT FK_VOCACION_MEDICO
FOREIGN KEY (VOCACION) REFERENCES VOCACION
GO

ALTER TABLE CAUSACITA 
ADD CONSTRAINT UQ_DESCRIPCION_CAUSACITA
UNIQUE (DESCRIPCION)
GO

ALTER TABLE CITA
ADD CONSTRAINT FK_PACIENTE_CITA
FOREIGN KEY (PACIENTE) REFERENCES PACIENTE
GO

ALTER TABLE CITA
ADD CONSTRAINT FK_MEDICO_CITA
FOREIGN KEY (MEDICO) REFERENCES MEDICO
GO

ALTER TABLE CITA
ADD CONSTRAINT FK_CAUSACITA_CITA
FOREIGN KEY (CAUSACITA) REFERENCES CAUSACITA
GO

ALTER TABLE DIAGNOSTICO
ADD CONSTRAINT FK_CITA_DIAGNOSTICO
FOREIGN KEY (CITA) REFERENCES CITA
GO

-----------SP
---PACIENTE
CREATE PROCEDURE SP_PACIENTE_MANT
	@OPCION INT,
	@ID INT,
	@NOMBRE VARCHAR(50),
	@APELLIDO VARCHAR(50),
	@FECHA_NACIMIENTO DATE,
	@ESTADO BIT,
	@FECHA_REGISTRO DATETIME
AS
BEGIN
	IF @OPCION = 1 -- LISTADO DE PACIENTE
	BEGIN
		SELECT ID, NOMBRE, APELLIDO, FECHA_NACIMIENTO, 
		CASE
            WHEN ESTADO = 0 THEN 'INACTIVO'
            WHEN ESTADO = 1 THEN 'ACTIVO'
            END AS ESTADO,
		FECHA_REGISTRO 
		FROM PACIENTE
	END

	IF @OPCION = 2 -- BUSCAR PACIENTE
	BEGIN
		SELECT ID, NOMBRE, APELLIDO, FECHA_NACIMIENTO, FECHA_REGISTRO FROM PACIENTE
		WHERE ID = @ID
	END
	
	IF @OPCION = 3 --REGISTRO DE PACIENTE
	BEGIN
		IF EXISTS (SELECT 1 FROM PACIENTE WHERE NOMBRE = @NOMBRE AND APELLIDO = @APELLIDO)
		BEGIN
			SELECT -1 --EL NOMBRE COMPLETO DE ESTE PACIENTE YA EXISTE
		END
		ELSE
		BEGIN
			INSERT INTO PACIENTE(NOMBRE, APELLIDO, FECHA_NACIMIENTO, ESTADO, FECHA_REGISTRO)
			VALUES(@NOMBRE, @APELLIDO, @FECHA_NACIMIENTO, @ESTADO, GETDATE());
			SELECT @@IDENTITY
		END
	END

	IF @OPCION = 4 --ACTUALIZAR DATOS DE PACIENTE
	BEGIN
		IF EXISTS (SELECT 1 FROM PACIENTE WHERE NOMBRE = @NOMBRE AND APELLIDO = @APELLIDO AND ID <> @ID)
		BEGIN
			SELECT -1 --YA EXISTE OTRO PACIENTE CON ESTE NOMBRE COMPLETO
		END
		ELSE
		BEGIN
			UPDATE PACIENTE 
			SET 
			NOMBRE = @NOMBRE,
			APELLIDO = @APELLIDO,
			FECHA_NACIMIENTO = @FECHA_NACIMIENTO,
			ESTADO = @ESTADO
			WHERE
			ID = @ID
			SELECT 2
		END
	END

	IF @OPCION = 5 --ACTUALIZAR ESTADO DE PACIENTE
	BEGIN
		IF EXISTS (SELECT 1 FROM PACIENTE WHERE ID = @ID)
		BEGIN
			UPDATE PACIENTE 
			SET 
			ESTADO = @ESTADO
			WHERE
			ID = @ID
			SELECT 2
		END
	END
END
GO

--- MEDICO
CREATE PROCEDURE SP_MEDICO_MANT
	@OPCION INT,
	@ID INT,
	@NOMBRE VARCHAR(50),
	@APELLIDO VARCHAR(50),
	@FECHA_NACIMIENTO DATE,
	@VOCACION INT,
	@ESTADO BIT,
	@FECHA_REGISTRO DATETIME
AS
BEGIN
	IF @OPCION = 1 --LISTA DE MEDICOS
	BEGIN
		SELECT M.ID, M.NOMBRE, M.APELLIDO, M.FECHA_NACIMIENTO, 
		V.DESCRIPCION AS VOCACION,
		CASE
            WHEN M.ESTADO = 0 THEN 'INACTIVO'
            WHEN M.ESTADO = 1 THEN 'ACTIVO'
            END AS ESTADO
		, M.FECHA_REGISTRO
		FROM 
		MEDICO M
		JOIN VOCACION V
		ON M.VOCACION = V.ID
	END

	IF @OPCION = 2 --BUSCAR MEDICO
	BEGIN
		SELECT M.ID, M.NOMBRE, M.APELLIDO, M.FECHA_NACIMIENTO, 
		V.DESCRIPCION AS VOCACION,
		CASE
            WHEN M.ESTADO = 0 THEN 'INACTIVO'
            WHEN M.ESTADO = 1 THEN 'ACTIVO'
            END AS ESTADO
		, M.FECHA_REGISTRO
		FROM 
		MEDICO M
		JOIN VOCACION V
		ON M.VOCACION = V.ID
		WHERE M.ID = @ID
	END
	
	IF @OPCION = 3 --REGISTRO DE MEDICO
	BEGIN
		IF EXISTS (SELECT 1 FROM MEDICO WHERE NOMBRE = @NOMBRE AND APELLIDO = @APELLIDO)
		BEGIN
			SELECT -1 --EL NOMBRE COMPLETO DE ESTE MEDICO YA EXISTE
		END
		ELSE
		BEGIN
			INSERT INTO MEDICO(NOMBRE, APELLIDO, FECHA_NACIMIENTO, VOCACION, ESTADO, FECHA_REGISTRO)
			VALUES(@NOMBRE, @APELLIDO, @FECHA_NACIMIENTO, @VOCACION, @ESTADO, GETDATE());
		END
	END

	IF @OPCION = 4 --ACTUALIZAR DATOS DE MEDICO
	BEGIN
		IF EXISTS (SELECT 1 FROM MEDICO WHERE NOMBRE = @NOMBRE AND APELLIDO = @APELLIDO AND ID <> @ID)
		BEGIN
			SELECT -1 --YA EXISTE OTRO MEDICO CON ESTE NOMBRE COMPLETO
		END
		ELSE
		BEGIN
			UPDATE MEDICO 
			SET 
			NOMBRE = @NOMBRE,
			APELLIDO = @APELLIDO,
			FECHA_NACIMIENTO = @FECHA_NACIMIENTO,
			VOCACION = @VOCACION,
			ESTADO = @ESTADO
			WHERE
			ID = @ID
			SELECT 2
		END
	END

	IF @OPCION = 5 --ACTUALIZAR ESTADO DE MEDICO
	BEGIN
		IF EXISTS (SELECT 1 FROM MEDICO WHERE ID = @ID)
		BEGIN
			UPDATE MEDICO 
			SET 
			ESTADO = @ESTADO
			WHERE
			ID = @ID
			SELECT 2
		END
		ELSE
		BEGIN
			SELECT -2
		END 
	END
END
GO

--- VOCACION
CREATE PROCEDURE SP_VOCACION_MANT
	@OPCION INT,
	@ID INT,
	@DESCRIPCION VARCHAR(30),
	@FECHA_REGISTRO DATETIME
AS
BEGIN
	IF @OPCION = 1 -- LISTADO DE VOCACION
	BEGIN
		SELECT ID, DESCRIPCION, FECHA_REGISTRO
		FROM VOCACION
	END

	IF @OPCION = 2 -- BUSCAR VOCACION
	BEGIN
		SELECT ID, DESCRIPCION, FECHA_REGISTRO 
		FROM VOCACION
		WHERE ID = @ID
	END
	
	IF @OPCION = 3 --REGISTRO DE VOCACION
	BEGIN
		IF EXISTS (SELECT 1 FROM VOCACION WHERE DESCRIPCION = @DESCRIPCION)
		BEGIN
			SELECT -1 --EL NOMBRE COMPLETO DE VOCACION YA EXISTE
		END
		ELSE
		BEGIN
			INSERT INTO VOCACION(ID, DESCRIPCION, FECHA_REGISTRO)
			VALUES(@ID, @DESCRIPCION, GETDATE());
			SELECT @@IDENTITY
		END
	END

	IF @OPCION = 4 --ACTUALIZAR DATOS DE VOCACION
	BEGIN
		IF EXISTS (SELECT 1 FROM VOCACION WHERE DESCRIPCION = @DESCRIPCION AND ID <> @ID)
		BEGIN
			SELECT -1 --YA EXISTE VOCACION CON ESTE NOMBRE COMPLETO
		END
		ELSE
		BEGIN
			UPDATE VOCACION 
			SET 
			DESCRIPCION = @DESCRIPCION
			WHERE
			ID = @ID
			SELECT 2
		END
	END

	IF @OPCION = 5 --ACTUALIZAR ESTADO DE VOCACION
	BEGIN
		IF EXISTS (SELECT 1 FROM VOCACION WHERE ID = @ID)
		BEGIN
			DELETE FROM VOCACION
			WHERE
			ID = @ID
			SELECT 3
		END
		ELSE
		BEGIN
			SELECT -3
		END
	END
END
GO

--- CAUSACITA
CREATE PROCEDURE SP_CAUSACITA_MANT
	@OPCION INT,
	@ID INT,
	@DESCRIPCION VARCHAR(30),
	@FECHA_REGISTRO DATETIME
AS
BEGIN
	IF @OPCION = 1 -- LISTADO DE CAUSACITA
	BEGIN
		SELECT ID, DESCRIPCION, FECHA_REGISTRO
		FROM CAUSACITA
	END

	IF @OPCION = 2 -- BUSCAR CAUSACITA
	BEGIN
		SELECT ID, DESCRIPCION, FECHA_REGISTRO 
		FROM CAUSACITA
		WHERE ID = @ID
	END
	
	IF @OPCION = 3 --REGISTRO DE CAUSACITA
	BEGIN
		IF EXISTS (SELECT 1 FROM CAUSACITA WHERE DESCRIPCION = @DESCRIPCION)
		BEGIN
			SELECT -1 --EL NOMBRE COMPLETO DE CAUSACITA YA EXISTE
		END
		ELSE
		BEGIN
			INSERT INTO CAUSACITA(ID, DESCRIPCION, FECHA_REGISTRO)
			VALUES(@ID, @DESCRIPCION, GETDATE());
			SELECT @@IDENTITY
		END
	END

	IF @OPCION = 4 --ACTUALIZAR DATOS DE CAUSACITA
	BEGIN
		IF EXISTS (SELECT 1 FROM CAUSACITA WHERE DESCRIPCION = @DESCRIPCION AND ID <> @ID)
		BEGIN
			SELECT -1 --YA EXISTE CAUSACITA CON ESTE NOMBRE COMPLETO
		END
		ELSE
		BEGIN
			UPDATE CAUSACITA 
			SET 
			DESCRIPCION = @DESCRIPCION
			WHERE
			ID = @ID
			SELECT 2
		END
	END

	IF @OPCION = 5 --ACTUALIZAR ESTADO DE CAUSACITA
	BEGIN
		IF EXISTS (SELECT 1 FROM CAUSACITA WHERE ID = @ID)
		BEGIN
			DELETE FROM CAUSACITA
			WHERE
			ID = @ID
			SELECT 3
		END
		ELSE
		BEGIN
			SELECT -3
		END
	END
END
GO

-- CITA
CREATE PROCEDURE SP_CITA_MANT
	@OPCION INT,
	@ID INT,
	@PACIENTE INT,
	@MEDICO INT,
	@HORARIO DATETIME,
	@CAUSACITA INT,
	@FECHA_REGISTRO DATETIME
AS
BEGIN
	IF @OPCION = 1 --LISTA DE CITAS
	BEGIN
		SELECT P.NOMBRE +' '+ P.APELLIDO AS PACIENTE, 
		M.NOMBRE + ' ' + M.APELLIDO AS MEDICO,
		C.HORARIO, CC.DESCRIPCION, C.FECHA_REGISTRO
		FROM 
		CITA C
		JOIN PACIENTE P
		ON C.PACIENTE = P.ID
		JOIN MEDICO M
		ON M.ID = C.MEDICO
		JOIN CAUSACITA CC
		ON CC.ID = C.CAUSACITA
	END

	IF @OPCION = 2 --BUSCAR CITA
	BEGIN
		SELECT P.NOMBRE +' '+ P.APELLIDO AS PACIENTE, 
		M.NOMBRE + ' ' + M.APELLIDO AS MEDICO,
		C.HORARIO, CC.DESCRIPCION, C.FECHA_REGISTRO
		FROM 
		CITA C
		JOIN PACIENTE P
		ON C.PACIENTE = P.ID
		JOIN MEDICO M
		ON M.ID = C.MEDICO
		JOIN CAUSACITA CC
		ON CC.ID = C.CAUSACITA
		WHERE C.ID = @ID
	END
	
	IF @OPCION = 3 --REGISTRO DE CITA
	BEGIN
		IF EXISTS (SELECT 1 FROM CITA WHERE HORARIO = @HORARIO AND MEDICO = @MEDICO)
		BEGIN
			SELECT -1 --EL REGISTRO DE ESTE CITA YA ESTA OCUPADO
		END
		ELSE
		BEGIN
			INSERT INTO CITA(PACIENTE, MEDICO, HORARIO, CAUSACITA, FECHA_REGISTRO)
			VALUES(@PACIENTE, @MEDICO, @HORARIO, @CAUSACITA, GETDATE());
		END
	END

	IF @OPCION = 4 --ACTUALIZAR DATOS DE CITA
	BEGIN
		IF EXISTS (SELECT 1 FROM CITA WHERE HORARIO = @HORARIO AND MEDICO = @MEDICO AND ID <> @ID)
		BEGIN
			SELECT -1 --EL REGISTRO DE ESTE CITA YA ESTA OCUPADO
		END
		ELSE
		BEGIN
			UPDATE CITA 
			SET 
			PACIENTE = @PACIENTE,
			MEDICO = @MEDICO,
			HORARIO = @HORARIO,
			CAUSACITA = @CAUSACITA
			WHERE
			ID = @ID
			SELECT 2
		END
	END

	IF @OPCION = 5 --ELIMINAR CITA
	BEGIN
		IF EXISTS (SELECT 1 FROM CITA WHERE ID = @ID)
		BEGIN
			DELETE CITA
			WHERE
			ID = @ID
			SELECT 3
		END
		ELSE
		BEGIN
			SELECT -3
		END
	END
END
GO

--DIAGNOSTICO
CREATE PROCEDURE SP_DIAGNOSTICO_MANT
	@OPCION INT,
	@ID INT,
	@CITA INT,
	@DESCRIPCION TEXT,
	@FECHA_REGISTRO DATETIME
AS
BEGIN
	IF @OPCION = 1 --LISTA DE DIAGNOSTICOS
	BEGIN
		SELECT ID, CITA, DESCRIPCION, FECHA_REGISTRO
		FROM 
		DIAGNOSTICO
	END

	IF @OPCION = 2 --BUSCAR DIAGNOSTICO
	BEGIN
		SELECT ID, CITA, DESCRIPCION, FECHA_REGISTRO
		FROM 
		DIAGNOSTICO
		WHERE ID = @ID
	END
	
	IF @OPCION = 3 --REGISTRO DE DIAGNOSTICO
	BEGIN
		INSERT INTO DIAGNOSTICO(CITA, DESCRIPCION, FECHA_REGISTRO)
			VALUES(@CITA, @DESCRIPCION, GETDATE());
	END

	IF @OPCION = 4 --ACTUALIZAR DATOS DE DIAGNOSTICO
	BEGIN
		UPDATE DIAGNOSTICO 
			SET 
				CITA = @CITA,
				DESCRIPCION = @DESCRIPCION
			WHERE
				ID = @ID
			SELECT 2
	END

	IF @OPCION = 5 --ELIMINAR DIAGNOSTICO
	BEGIN
		IF EXISTS (SELECT 1 FROM DIAGNOSTICO WHERE ID = @ID)
		BEGIN
			DELETE DIAGNOSTICO
			WHERE
			ID = @ID
			SELECT 3
		END
		ELSE
		BEGIN
			SELECT -3
		END
	END
END
GO